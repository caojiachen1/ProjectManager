# .NET Build and Release Workflow
# 
# This workflow automatically builds, tests, and creates releases with version tagging.
# 
# VERSION TAGGING USAGE:
# =====================
# 
# 1. MAJOR VERSION UPDATE (v0.5 → v1.0)
#    Include [major] or "BREAKING CHANGE" in commit message:
#    git commit -m "Refactor entire file management system [major]"
#    git commit -m "BREAKING CHANGE: Complete rewrite of API interfaces"
# 
# 2. FEATURE VERSION UPDATE (v0.5 → v0.15)
#    Include [minor] or [feature] in commit message:
#    git commit -m "Add file preview functionality [feature]"
#    git commit -m "Add batch operations feature [minor]"
# 
# 3. REGULAR UPDATE (v0.5 → v0.6)
#    Normal commit message without special tags:
#    git commit -m "Fix file sorting bug"
# 
# VERSION EXAMPLES:
# - Initial: v0.1
# - Regular: v0.1 → v0.2 → v0.3
# - Major:   v0.3 → v1.0 (resets minor to 0)
# - Continue: v1.0 → v1.1 → v1.2

name: ProjectManager

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for tag detection
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Get latest tag and generate new version
      id: version
      run: |
        # Get the latest release tag from GitHub API
        try {
          $headers = @{ 'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}' }
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -Headers $headers
          $latestTag = $response.tag_name
          echo "Found latest release tag: $latestTag"
        } catch {
          echo "No previous releases found or API error: $_"
          $latestTag = $null
        }
        
        # Check commit message for version bump indicators
        $commitMessage = "${{ github.event.head_commit.message }}" -replace '"', '\"' -replace "'", "\'"
        Write-Host "Processing commit message: $commitMessage"
        
        # Validate commit message is not empty
        if ([string]::IsNullOrWhiteSpace($commitMessage)) {
          Write-Host "Warning: Empty commit message, treating as patch update"
          $commitMessage = "Update"
        }
        
        $isMajorBump = $commitMessage -match "\[major\]" -or $commitMessage -match "BREAKING CHANGE"
        $isMinorBump = $commitMessage -match "\[minor\]" -or $commitMessage -match "\[feature\]"
        
        # Clean commit message by removing version tags with improved regex
        $cleanCommitMessage = $commitMessage -replace "\s*\[(major|minor|feature)\]\s*", "" -replace "BREAKING CHANGE:\s*", "" -replace "\s+", " "
        $cleanCommitMessage = $cleanCommitMessage.Trim()
        
        # Ensure clean commit message is not empty
        if ([string]::IsNullOrWhiteSpace($cleanCommitMessage)) {
          $cleanCommitMessage = "Update"
        }
        
        # Escape special characters for GitHub output
        $cleanCommitMessage = $cleanCommitMessage -replace "`n", " " -replace "`r", " " -replace "\*", "\*" -replace "_", "\_"
        
        if ($latestTag) {
          # Extract version number
          $version = $latestTag -replace '^v', ''
          $versionParts = $version.Split('.')
          
          # Validate version parts
          if ($versionParts.Length -eq 0) {
            Write-Host "Warning: Invalid version format in tag $latestTag, starting fresh"
            $major = 0
            $minor = 0
          } else {
            $major = if ([int]::TryParse($versionParts[0], [ref]$null)) { [int]$versionParts[0] } else { 0 }
            $minor = if ($versionParts.Length -gt 1 -and [int]::TryParse($versionParts[1], [ref]$null)) { [int]$versionParts[1] } else { 0 }
          }
          
          if ($isMajorBump) {
            # Major version bump (e.g., v0.3 -> v1.0)
            $major++
            $minor = 0
            $newVersion = "v$major.$minor"
            echo "major_update=true" >> $env:GITHUB_OUTPUT
          } else {
            # Regular increment by 1 in minor version (e.g., v0.1 -> v0.2, v0.3 -> v0.4)
            $minor++
            $newVersion = "v$major.$minor"
            if ($isMinorBump) {
              echo "minor_update=true" >> $env:GITHUB_OUTPUT
            } else {
              echo "patch_update=true" >> $env:GITHUB_OUTPUT
            }
          }
        } else {
          # No previous releases, start with v0.1
          $newVersion = "v0.1"
          echo "initial_release=true" >> $env:GITHUB_OUTPUT
        }
        
        echo "new_version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "previous_tag=$latestTag" >> $env:GITHUB_OUTPUT
        echo "clean_commit_message=$cleanCommitMessage" >> $env:GITHUB_OUTPUT
        echo "New version will be: $newVersion"
        if ($isMajorBump) { echo "This is a MAJOR version update!" }
        elseif ($isMinorBump) { echo "This is a MINOR version update!" }
        else { echo "This is a regular patch update." }

    # 直接用 GitHub 仓库名作为项目名，无需额外步骤

    - name: Publish WPF application
      run: |
        $version = "${{ steps.version.outputs.new_version }}" -replace '^v', ''
        $projectName = "${{ github.event.repository.name }}"
        # Publish as self-contained WPF application for Windows x64
        dotnet publish -c Release --runtime win-x64 -o ./publish/

        # Publish as framework-dependent standalone executable (requires .NET runtime)
        dotnet publish -c Release --runtime win-x64 --self-contained false -p:PublishSingleFile=true -o ./publish-standalone/

    - name: Create portable ZIP package
      run: |
        $projectName = "${{ github.event.repository.name }}"
        $zipName = "$projectName-${{ steps.version.outputs.new_version }}-portable.zip"
        # Ensure publish directory exists and has content
        if (!(Test-Path "./publish/") -or (Get-ChildItem "./publish/" | Measure-Object).Count -eq 0) {
          throw "Publish directory is empty or doesn't exist"
        }
        Compress-Archive -Path "./publish/*" -DestinationPath $zipName -Force
        echo "ZIP package created: $zipName"
        echo "ZIP_PATH=$zipName" >> $env:GITHUB_ENV
        # Show package contents and size for verification
        echo "Package contents:"
        Get-ChildItem ./publish/ | ForEach-Object { echo "  $($_.Name)" }
        echo "ZIP file size: $((Get-Item $zipName).Length / 1MB) MB"

    - name: Create framework-dependent standalone executable
      run: |
        $projectName = "${{ github.event.repository.name }}"
        $exeName = "$projectName-${{ steps.version.outputs.new_version }}-standalone.exe"
        # Find the main executable in the framework-dependent standalone publish folder
        $sourceExe = Get-ChildItem "./publish-standalone/" -Filter "*.exe" | Where-Object { $_.Name -notlike "*host*" } | Select-Object -First 1
        if ($sourceExe) {
          Copy-Item $sourceExe.FullName -Destination $exeName
          echo "Framework-dependent standalone executable created: $exeName"
          echo "FRAMEWORK_EXE_PATH=$exeName" >> $env:GITHUB_ENV
          echo "Framework-dependent EXE file size: $((Get-Item $exeName).Length / 1MB) MB"
        } else {
          throw "Could not find the main executable in framework-dependent standalone publish folder"
        }

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: ${{ steps.version.outputs.new_version }}
        body: |
          ## Changes in this release
          ${{ steps.version.outputs.clean_commit_message }}

          ## Download Options
          - `${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}-standalone.exe` - Single file, requires .NET 8 runtime installed
          - `${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}-portable.zip` - Extract and run
        draft: false
        prerelease: false

    - name: Upload ZIP Package
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ZIP_PATH }}
        asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}-portable.zip
        asset_content_type: application/zip

    - name: Upload Framework-Dependent Standalone Executable
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.FRAMEWORK_EXE_PATH }}
        asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}-standalone.exe
        asset_content_type: application/octet-stream

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: portable-package-${{ steps.version.outputs.new_version }}
        path: ${{ env.ZIP_PATH }}

    - name: Upload framework-dependent standalone artifact
      uses: actions/upload-artifact@v4
      with:
        name: framework-dependent-executable-${{ steps.version.outputs.new_version }}
        path: ${{ env.FRAMEWORK_EXE_PATH }}